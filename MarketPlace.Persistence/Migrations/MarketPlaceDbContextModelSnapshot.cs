// <auto-generated />
using System;
using MarketPlace.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace MarketPlace.Persistence.Migrations;

[DbContext(typeof(MarketPlaceDbContext))]
partial class MarketPlaceDbContextModelSnapshot : ModelSnapshot
{
    protected override void BuildModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
        modelBuilder
            .HasAnnotation("ProductVersion", "7.0.11")
            .HasAnnotation("Relational:MaxIdentifierLength", 128);

        SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

        modelBuilder.Entity("MarketPlace.Domain.Entitites.Category", b =>
            {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("bigint");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                b.Property<long>("CreatedBy")
                    .HasColumnType("bigint");

                b.Property<DateTime>("CreatedDate")
                    .HasColumnType("datetime2");

                b.Property<string>("Description")
                    .IsRequired()
                    .HasMaxLength(4000)
                    .HasColumnType("nvarchar(4000)");

                b.Property<string>("Image")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Title")
                    .IsRequired()
                    .HasMaxLength(50)
                    .HasColumnType("nvarchar(50)");

                b.Property<long>("UpdatedBy")
                    .HasColumnType("bigint");

                b.Property<DateTime?>("UpdatedDate")
                    .HasColumnType("datetime2");

                b.HasKey("Id");

                b.ToTable("Categories");
            });

        modelBuilder.Entity("MarketPlace.Domain.Entitites.Order", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<long>("CreatedBy")
                    .HasColumnType("bigint");

                b.Property<DateTime>("CreatedDate")
                    .HasColumnType("datetime2");

                b.Property<bool>("IsCompleted")
                    .HasColumnType("bit");

                b.Property<int>("PaymentType")
                    .HasColumnType("int");

                b.Property<double>("TotalPrice")
                    .HasColumnType("float");

                b.Property<long>("UpdatedBy")
                    .HasColumnType("bigint");

                b.Property<DateTime?>("UpdatedDate")
                    .HasColumnType("datetime2");

                b.HasKey("Id");

                b.ToTable("Orders");
            });

        modelBuilder.Entity("MarketPlace.Domain.Entitites.OrderDetailProduct", b =>
            {
                b.Property<Guid>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("uniqueidentifier");

                b.Property<int>("Count")
                    .HasColumnType("int");

                b.Property<long>("CreatedBy")
                    .HasColumnType("bigint");

                b.Property<DateTime>("CreatedDate")
                    .HasColumnType("datetime2");

                b.Property<Guid>("OrderId")
                    .HasColumnType("uniqueidentifier");

                b.Property<double>("Price")
                    .HasColumnType("float");

                b.Property<long>("ProductId")
                    .HasColumnType("bigint");

                b.Property<long>("UpdatedBy")
                    .HasColumnType("bigint");

                b.Property<DateTime?>("UpdatedDate")
                    .HasColumnType("datetime2");

                b.HasKey("Id");

                b.HasIndex("OrderId");

                b.HasIndex("ProductId");

                b.ToTable("OrderDetailProducts");
            });

        modelBuilder.Entity("MarketPlace.Domain.Entitites.Product", b =>
            {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("bigint");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                b.Property<long>("CategoryId")
                    .HasColumnType("bigint");

                b.Property<long>("CreatedBy")
                    .HasColumnType("bigint");

                b.Property<DateTime>("CreatedDate")
                    .HasColumnType("datetime2");

                b.Property<string>("Description")
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnType("nvarchar(500)");

                b.Property<string>("Image")
                    .HasColumnType("nvarchar(max)");

                b.Property<double>("Price")
                    .HasColumnType("float");

                b.Property<string>("ProductName")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)");

                b.Property<int>("Quantity")
                    .HasColumnType("int");

                b.Property<DateTime?>("Release")
                    .IsRequired()
                    .HasColumnType("datetime2");

                b.Property<long>("SellerId")
                    .HasColumnType("bigint");

                b.Property<long>("UpdatedBy")
                    .HasColumnType("bigint");

                b.Property<DateTime?>("UpdatedDate")
                    .HasColumnType("datetime2");

                b.HasKey("Id");

                b.HasIndex("CategoryId");

                b.HasIndex("SellerId");

                b.ToTable("Products");
            });

        modelBuilder.Entity("MarketPlace.Domain.Entitites.Review", b =>
            {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("bigint");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                b.Property<string>("Comment")
                    .HasMaxLength(4000)
                    .HasColumnType("nvarchar(4000)");

                b.Property<long>("CreatedBy")
                    .HasColumnType("bigint");

                b.Property<DateTime>("CreatedDate")
                    .HasColumnType("datetime2");

                b.Property<long>("ProductId")
                    .HasColumnType("bigint");

                b.Property<int>("Rating")
                    .HasColumnType("int");

                b.Property<long>("UpdatedBy")
                    .HasColumnType("bigint");

                b.Property<DateTime?>("UpdatedDate")
                    .HasColumnType("datetime2");

                b.HasKey("Id");

                b.HasIndex("ProductId");

                b.ToTable("Reviews");
            });

        modelBuilder.Entity("MarketPlace.Domain.Entitites.Seller", b =>
            {
                b.Property<long>("Id")
                    .ValueGeneratedOnAdd()
                    .HasColumnType("bigint");

                SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                b.Property<long>("CreatedBy")
                    .HasColumnType("bigint");

                b.Property<DateTime>("CreatedDate")
                    .HasColumnType("datetime2");

                b.Property<string>("Description")
                    .IsRequired()
                    .HasMaxLength(500)
                    .HasColumnType("nvarchar(500)");

                b.Property<string>("Email")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<bool>("IsActive")
                    .HasColumnType("bit");

                b.Property<string>("LogoUrl")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<string>("Name")
                    .IsRequired()
                    .HasMaxLength(100)
                    .HasColumnType("nvarchar(100)");

                b.Property<string>("PhoneNumber")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.Property<long>("UpdatedBy")
                    .HasColumnType("bigint");

                b.Property<DateTime?>("UpdatedDate")
                    .HasColumnType("datetime2");

                b.Property<string>("Url")
                    .IsRequired()
                    .HasColumnType("nvarchar(max)");

                b.HasKey("Id");

                b.ToTable("Sellers");
            });

        modelBuilder.Entity("MarketPlace.Domain.Entitites.OrderDetailProduct", b =>
            {
                b.HasOne("MarketPlace.Domain.Entitites.Order", "Order")
                    .WithMany("OrderDetailProduct")
                    .HasForeignKey("OrderId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired();

                b.HasOne("MarketPlace.Domain.Entitites.Product", "Product")
                    .WithMany("OrderDetails")
                    .HasForeignKey("ProductId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired();

                b.Navigation("Order");

                b.Navigation("Product");
            });

        modelBuilder.Entity("MarketPlace.Domain.Entitites.Product", b =>
            {
                b.HasOne("MarketPlace.Domain.Entitites.Category", "Category")
                    .WithMany("Products")
                    .HasForeignKey("CategoryId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.HasOne("MarketPlace.Domain.Entitites.Seller", "Seller")
                    .WithMany("Products")
                    .HasForeignKey("SellerId")
                    .OnDelete(DeleteBehavior.Cascade)
                    .IsRequired();

                b.Navigation("Category");

                b.Navigation("Seller");
            });

        modelBuilder.Entity("MarketPlace.Domain.Entitites.Review", b =>
            {
                b.HasOne("MarketPlace.Domain.Entitites.Product", "Product")
                    .WithMany("Reviews")
                    .HasForeignKey("ProductId")
                    .OnDelete(DeleteBehavior.Restrict)
                    .IsRequired();

                b.Navigation("Product");
            });

        modelBuilder.Entity("MarketPlace.Domain.Entitites.Category", b =>
            {
                b.Navigation("Products");
            });

        modelBuilder.Entity("MarketPlace.Domain.Entitites.Order", b =>
            {
                b.Navigation("OrderDetailProduct");
            });

        modelBuilder.Entity("MarketPlace.Domain.Entitites.Product", b =>
            {
                b.Navigation("OrderDetails");

                b.Navigation("Reviews");
            });

        modelBuilder.Entity("MarketPlace.Domain.Entitites.Seller", b =>
            {
                b.Navigation("Products");
            });
#pragma warning restore 612, 618
    }
}
